import sys,argparseimport os,glob,reimport numpy as npimport pandas as pd#from GenomeData import *import matplotlib# matplotlib.use('Agg')import matplotlib.pyplot as pltmatplotlib.rcParams['font.size']=14matplotlib.rcParams["font.sans-serif"] = ["Arial", "Liberation Sans", "Bitstream Vera Sans"]matplotlib.rcParams["font.family"] = "sans-serif"import seaborn as snssns.set(font_scale=1)sns.set_style("whitegrid", {'axes.grid' : False})sns.set_style("ticks")from matplotlib_venn import venn3,venn2from scipy import statsimport warningswarnings.filterwarnings("ignore")def mark_pvalue(compr_pos,positions,box_vals):    s,p = stats.ttest_ind(box_vals[compr_pos[1]],box_vals[compr_pos[0]],nan_policy='omit')    # y, h, col = np.percentile(np.append(box_vals[compr_pos[0]],box_vals[compr_pos[1]]),98)*.99 ,1.05, 'k'    # y2 = np.percentile(np.append(box_vals[compr_pos[0]],box_vals[compr_pos[1]]),95)*0.99    x1,x2 = positions[compr_pos[0]],positions[compr_pos[1]]    # p_label='{:.1e}'.format(p)    # if p_label[-2]=='0':    #     p_label = p_label[:-2]+p_label[-1]    # if p>=0.05:    #     p_label = 'n.s.'        y = np.percentile(box_vals[compr_pos[0]],97.5)    if p<0.05:        plt.text(x2, y, '*', ha='center', va='center_baseline', color='r',fontsize=27)        return s,p        # if compr_pos[2] == 't':    #     plt.plot([x1*1.03, x1*1.03, x2*0.97, x2*0.97], [y, y*h, y*h, y], lw=1, c=col)    #     plt.text((x1+x2)*.5, y*h, p_label, ha='center', va='bottom', color=col,fontsize=12)    # else:    #     plt.plot([x1*1.03, x1*1.03, x2*0.97, x2*0.97], [y2, y2*.91, y2*.91, y2], lw=1, c=col)    #     plt.text((x1+x2)*.5, y2*.95, p_label, ha='center', va='top', color=col,fontsize=12)indir = 'f3_DCI_overlap_coBinding_TFBS'outdir = 'f4_DCI_overlap_coBinding_TFBS_figs'os.makedirs(outdir,exist_ok=True)# atac_file = '../../../f9_TF_condensates_V3/data/TCGA/tcga_atac.bed'name_match = pd.read_excel('../../../f9_TF_condensates_V3/data/TCGA/TCGA-ATAC_SE_cancerType_match.xlsx',index_col=0)   name_match = name_match.dropna()# clinical_dir = '../../..//f7_TF_condensates_test/f6_revised_TCGA_ATAC_cor_SE/f2_clinical_hicor_atac_peaks/f1_clinical_at_each_peak/f2_caseID_each_peak_vs_clinical/'p_thre = 0.05alpha = .7selected_factors = {}tfbs_cp_dir = '../../f1_TF_cluster_potential/f2_cor_CP_SE_AICAP/f9_per_CT_TFBS_CP_cor_zscore_CP_with_motif_SE/TFBS_CP/'for ct in ['MCF-7','HCT-116'][:]:    df = pd.read_csv('{}/_CP_TFBS_all_vs_TFMS_{}.csv'.format(tfbs_cp_dir,ct),index_col=0)    selected_factors['{} top_TFBSCP'.format(ct)] = df['TFBS CP rank'].sort_values().iloc[:3].index    selected_factors['{} top_zscored_TFBSCP'.format(ct)] = df['avg rank'].sort_values().iloc[:3].indexdci_dir = '../../../f11_TF_condensates_KS_test/f3_public_data/f1_hct116_hic_RAD21_auxin/f1_bart3d/'genomicDistances = [100000, 200000, 500000]reps = ['rep1','rep2','all_reps']# flag = 'ATAC-seq peaks'# for ct in ['MCF-7','HCT-116'][:]:for cancertype in ['BRCA','COAD'][1:]:    ct = name_match.loc[cancertype].SE    # clinical_df = pd.read_csv('{}/{}_logrank_info.csv'.format(clinical_dir,cancertype),index_col=0)    for treat_flag in ['percentile_T','percentile_T_ExtendMerge'][:]:        for factorType in ['top_TFBSCP','top_zscored_TFBSCP'][:]:            subdir = '{}_{}'.format(ct,factorType)            os.makedirs(outdir+os.sep+subdir,exist_ok=True)                        factors = selected_factors['{} {}'.format(ct,factorType)]                        xticklabels = ['Union',                           '{}'.format('-'.join([i for i in factors[:1]])),                           '{}'.format('-'.join([i for i in factors[1:2]])),                           '{}'.format('-'.join([i for i in factors[2:3]])),                           '{}'.format('-'.join([i for i in factors[:2]])),                           '{}'.format('-'.join([i for i in factors[:3]])),                           ]                        # ==== box plot of DCI            for genomicDis in genomicDistances:                 for rep in reps:                                        box_vals = []                    out_df = pd.DataFrame()                    # ==== genomic DCI                    dci_file = '{}/RAD21_6hr_auxin_over_NT_{}_dis{}k_differential_score.bed'.format(dci_dir,rep,str(int(genomicDis/1000)))                     dci_df = pd.read_csv(dci_file,sep='\t',header=None)                    box_vals.append(dci_df[3])                                        # == DCI of co-binding                    for ii in np.arange(len(xticklabels))[:]:                        overlapped_bed = '{}/{}/DCI_RAD21_KO_{}_dis{}k_overlapped_{}_{}_{}.bed'.format(indir,subdir,rep,str(int(genomicDis/1000)),treat_flag,ct,xticklabels[ii])                        overlapped_df = pd.read_csv(overlapped_bed,sep='\t',header=None)                        box_vals.append(overlapped_df[3])                                        # ==== box plot                    figname = '{}_{}_{}_{}_DCI'.format(cancertype,rep,str(int(genomicDis/1000)),treat_flag)                    positions = np.arange(7)                    plt.figure(figsize=(3,2.5))                    g = plt.boxplot(box_vals,positions=positions,widths = .6,patch_artist=True,\                                boxprops=dict(color='k',facecolor='w',fill=None,lw=1),\                                medianprops=dict(color='grey'),showfliers=False)                                        # scatter_X = []                    # for position_id in np.arange(len(positions)):                    #     scatter_x = np.random.normal(positions[position_id],0.07,len(box_vals[position_id]))                    #     plt.scatter(scatter_x,box_vals[position_id],color='r',s=20,zorder=0,alpha=0.99,rasterized=True)                                    for ii in [1,2,3,4,5,6]:                        s,p = mark_pvalue([0,ii,'t'],positions,box_vals)                        out_df.loc[xticklabels[ii-1],'ttest-s'] = s                        out_df.loc[xticklabels[ii-1],'ttest-p'] = p                                            plt.axes().set_xticklabels(['All']+xticklabels,fontsize=12,rotation=45,ha='right')                    plt.axhline(y=0,color='k',lw=1.2,ls='--')                    # plt.xlim([0,i+1])                    # plt.ylim([-.1,7])                    # plt.axes().set_xticks(positions+0.7)                    # plt.axes().set_xticklabels(['< 20kb','20 - 100kb','> 100kb'],rotation=0, ha='right',fontsize=16,color='k')                    # plt.legend([g["boxes"][0],g["boxes"][1],g["boxes"][2]],['Control','ENCODE','GTEx'],fontsize=16,borderaxespad=0.1,labelspacing=.1,handletextpad=0.2,loc="upper left",frameon=False)                    # plt.axes().tick_params(axis='y',direction='out', length=4, width=1, colors='black')                        plt.ylabel('DCI of RAD21 \n depletion in HCT-116',fontsize=14)                    plt.title(cancertype)                    plt.savefig('{}/{}/{}.pdf'.format(outdir,subdir,figname),bbox_inches='tight',                                pad_inches=0.1,dpi=600,transparent=True)                    plt.show()                    plt.close()                                        out_df.to_csv('{}/{}/_{}.csv'.format(outdir,subdir,figname))                                                                                                    
import sys,argparseimport os,glob,reimport numpy as npimport pandas as pd#from GenomeData import *import matplotlib# matplotlib.use('Agg')import matplotlib.pyplot as pltmatplotlib.rcParams['font.size']=13matplotlib.rcParams["font.sans-serif"] = ["Arial", "Liberation Sans", "Bitstream Vera Sans"]matplotlib.rcParams["font.family"] = "sans-serif"import seaborn as snssns.set(font_scale=1)sns.set_style("whitegrid", {'axes.grid' : False})sns.set_style("ticks")from matplotlib_venn import venn3,venn2from scipy import statsimport warningswarnings.filterwarnings("ignore")indir = 'f3_coBinding_CTCF_specificity'outdir = 'f4_coBinding_CTCF_specificity_venn3'os.makedirs(outdir,exist_ok=True)selected_factors = {}tfbs_cp_dir = '../f2_cor_CP_SE_AICAP/f9_per_CT_TFBS_CP_cor_zscore_CP/TFBS_CP/'for ct in ['MCF-7','HCT-116'][:]:    df = pd.read_csv('{}/_CP_TFBS_all_vs_TFMS_{}.csv'.format(tfbs_cp_dir,ct),index_col=0)    selected_factors['{} top_TFBSCP'.format(ct)] = df['TFBS CP rank'].sort_values().iloc[:3].index    selected_factors['{} top_zscored_TFBSCP'.format(ct)] = df['avg rank'].sort_values().iloc[:3].indexalpha = .7for treat_flag in ['percentile_T','percentile_T_ExtendMerge'][:1]:    for ct in ['MCF-7','HCT-116'][:]:        for factorType in ['top_TFBSCP','top_zscored_TFBSCP'][1:]:            subdir = '{}_{}'.format(ct,factorType)            os.makedirs(outdir+os.sep+subdir,exist_ok=True)            factors = selected_factors['{} {}'.format(ct,factorType)]              # by CBS types            for CBS in ['CBS','CBS_occupancy_GT3'][:]:                for CBS_thre in [0.1,0.2,0.3][:]:                                       prenames = np.append(factors, ['{}'.format(CBS),'{}_thre_{}'.format(CBS,CBS_thre),'CBS_thre_0.8'])                    outdf = pd.DataFrame()                    for prename in prenames[:]:                        infile = '{}/{}/{}.merge.{}.overlapped.bed'.format(indir,subdir,treat_flag,prename)                        df = pd.read_csv(infile,header=None,sep='\t')                        df.columns = ['chr','start','end',prename]                        if outdf.shape[0]==0:                            outdf = pd.concat([outdf,df],axis=1)                        else:                            outdf = pd.concat([outdf,df[prename]],axis=1)                                        labels_tag = ["CBS Others","CBS Specific","CBS Constitutive","CBS NotOverlapped"]                    outdf.loc[outdf['{}'.format(CBS)]!=0,'annotation']= labels_tag[0]                    outdf.loc[outdf['{}_thre_{}'.format(CBS,CBS_thre)]!=0,'annotation']=labels_tag[1]                    outdf.loc[outdf['CBS_thre_0.8']!=0,'annotation']=labels_tag[2]                    outdf['annotation'] = outdf['annotation'].fillna(labels_tag[3])                        # ==== save the overlap infor                        outdf.to_csv('{}/{}/{}_{}_{}_thre_{}_cobinding.csv'.format(outdir,subdir,treat_flag,ct,CBS,CBS_thre),index=False)                                                # ==== bar plot for genomic annotations                    info_df = pd.DataFrame()                    plt.figure(figsize=(3,3))                    dfs = [outdf,                           outdf[(outdf[prenames[0]]!=0)],                           outdf[(outdf[prenames[1]]!=0)],                           outdf[(outdf[prenames[2]]!=0)],                           outdf[(outdf[prenames[0]]!=0)&(outdf[prenames[1]]!=0)],                           outdf[(outdf[prenames[0]]!=0)&(outdf[prenames[1]]!=0)&(outdf[prenames[2]]!=0)]]                    xticklabels = ['All',                                   '{}'.format('-'.join([i for i in prenames[:1]])),                                   '{}'.format('-'.join([i for i in prenames[1:2]])),                                   '{}'.format('-'.join([i for i in prenames[2:3]])),                                   '{}'.format('-'.join([i for i in prenames[:2]])),                                   '{}'.format('-'.join([i for i in prenames[:3]])),                                   ]                    colors = ['tab:green','tab:blue','tab:red','tab:grey'][::-1]                    colors = ['mediumaquamarine','b','r','silver'][::-1]                    labels = labels_tag[::-1]                    positions = np.arange(len(dfs))                    for position in positions:                        a = (dfs[position]['annotation']==labels[0]).sum()                        b = (dfs[position]['annotation']==labels[1]).sum()                        c = (dfs[position]['annotation']==labels[2]).sum()                        d = (dfs[position]['annotation']==labels[3]).sum()                        # e = (dfs[position]['{}_SE'.format(celltype)]!=0).sum()                        # e = ((dfs[position]['annotation']==labels[0])&(dfs[position]['{}_SE'.format(celltype)]!=0)).sum()                        total = a+b+c+d                        info_df.loc[xticklabels[position],labels[0]]=a                        info_df.loc[xticklabels[position],labels[1]]=b                        info_df.loc[xticklabels[position],labels[2]]=c                        info_df.loc[xticklabels[position],labels[3]]=d                        info_df.loc[xticklabels[position],'total']=total                        # info_df.loc[xticklabels[position],'SE overlapped']=e                        # info_df.loc[xticklabels[position],'%SE overlapped']=np.round(e/total,3)                        g0 = plt.bar(position, 100*a/total, bottom=0, width=.68, lw=0, color=colors[0],label=labels[0],alpha=alpha)                        g1 = plt.bar(position, 100*b/total, bottom=100*a/total, width=.68, lw=0, color=colors[1],label=labels[1],alpha=alpha)                        g2 = plt.bar(position, 100*c/total, bottom=100*(a+b)/total, width=.68, lw=0, color=colors[2],label=labels[2],alpha=alpha)                        g3 = plt.bar(position, 100*d/total, bottom=100*(a+b+c)/total, width=.68, lw=0, color=colors[3],label=labels[3],alpha=alpha)                        plt.text(position,0, a,va='bottom',ha='center',fontsize=9)                        plt.text(position,100*a/total, b,va='bottom',ha='center',fontsize=9)                        plt.text(position,100*(a+b)/total, c,va='bottom',ha='center',fontsize=9)                        plt.text(position,100*(a+b+c)/total, d,va='bottom',ha='center',fontsize=9)                        position+=1                    info_df.to_csv('{}/{}/{}_{}_{}_thre_{}_annotation.csv'.format(outdir,subdir,treat_flag,ct,CBS,CBS_thre))                    plt.ylabel('TFBS co-binding (%)',fontsize=13)                    plt.ylim([0,100])                    plt.legend([g3,g2,g1,g0],labels_tag,                               loc=1,bbox_to_anchor=(1.9,1.04),fontsize=13,                               borderaxespad=0.2,labelspacing=.2,handletextpad=0.2,handlelength=1,frameon=False)                    plt.axes().set_xticks(positions)                     sns.despine(offset=0, trim=True)                    plt.axes().spines['bottom'].set_visible(False)                    plt.axes().set_xticklabels(xticklabels,rotation=45,ha='right',fontsize=13)                     plt.axes().tick_params(axis='x',direction='out', length=0, width=.8, colors='black')                    plt.title(ct,fontsize=12)                    plt.savefig('{}/{}/fig_{}_{}_{}_thre_{}_annotation.pdf'.format(outdir,subdir,treat_flag,ct,CBS,CBS_thre),bbox_inches = 'tight',pad_inches=0.1,transparent=True)                    plt.show()                    plt.close()                                                                
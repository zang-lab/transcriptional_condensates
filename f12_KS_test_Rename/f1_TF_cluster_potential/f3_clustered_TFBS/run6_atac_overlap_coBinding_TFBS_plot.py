import sys,argparseimport os,glob,reimport numpy as npimport pandas as pd#from GenomeData import *import matplotlib# matplotlib.use('Agg')import matplotlib.pyplot as pltmatplotlib.rcParams['font.size']=13matplotlib.rcParams["font.sans-serif"] = ["Arial", "Liberation Sans", "Bitstream Vera Sans"]matplotlib.rcParams["font.family"] = "sans-serif"import seaborn as snssns.set(font_scale=1)sns.set_style("whitegrid", {'axes.grid' : False})sns.set_style("ticks")from matplotlib_venn import venn3,venn2from scipy import statsimport warningswarnings.filterwarnings("ignore")def add_logrank_info(out_df,df,motif_name,flag):    df_p = df[df['log rank p']<p_thre]    # if cp_fig:    #     for gene in df_p.index[:10]:    #         fig_file = '{}/fig/{}_{}_survival.pdf'.format(clinical_dir,cancertype,gene)    #         os.system('cp {} {}/_fig/'.format(fig_file,outdir))    df_pt = df[(df['treat time']<df['ctrl time'])&(df['log rank p']<p_thre)]    out_df.loc[motif_name,'{} total'.format(flag)] = df.shape[0]    out_df.loc[motif_name,'{} #P<{}'.format(flag,p_thre)] = df_p.shape[0]    out_df.loc[motif_name,'{} %P<{}'.format(flag,p_thre)] = np.round(df_p.shape[0]/df.shape[0],4)    out_df.loc[motif_name,'{} #TreatTime<CtrlTime&P<{}'.format(flag,p_thre)] = df_pt.shape[0]    out_df.loc[motif_name,'{} %TreatTime<CtrlTime&P<{}'.format(flag,p_thre)] = np.round(df_pt.shape[0]/df.shape[0],4)    return out_dfdef stack_bar(df,xticklabels,figname,cancertype,flag):        # print(annotation)#;exit()    plt.figure(figsize=(3,2.6))    # cancertypes = sorted(annotation.keys())    # cancertypes = annotation.keys()    # colors = ['lightgreen','cornflowerblue','lightgrey','lightsalmon'][::-1]    # labels = ["Promoter","Exon","Intron","Distal"][::-1]    positions = np.arange(df.shape[0])        t_all = df.loc['All','{} total'.format(flag)]    p_all = df.loc['All','{} #P<{}'.format(flag,p_thre)]        for position in positions:        index = df.index[position]         total = df.loc[index,'{} total'.format(flag)]        a = df.loc[index,'{} #P<{}'.format(flag,p_thre)]                s,p = stats.fisher_exact([[a,total-a],[p_all-a,t_all-p_all-total+a]])        p_label='{:.1e}'.format(p)        if p_label[-2]=='0':            p_label = p_label[:-2]+p_label[-1]        if p<0.05:            # plt.text(position,100*a/total, p_label , ha='center', va='bottom', color='k',fontsize=10)            plt.text(position,91*a/total, '*' , ha='center', va='bottom', color='tab:red',fontsize=22)                g0 = plt.bar(position,100*a/total,bottom=0,width = .68,                      lw=0,color = 'tab:purple',alpha=.6)            plt.title('{}'.format(cancertype))    plt.axes().set_xticks(positions)     plt.axes().set_xticklabels(xticklabels,rotation=45, ha='right',fontsize=13,color='k')    plt.ylabel('% TFBS overlapped ATAC-seq \npeaks w/ logrank P<0.05 ',fontsize=13)    if cancertype == 'COAD':        plt.ylim([0,8])    plt.savefig(figname,bbox_inches='tight',pad_inches=0.1,dpi=600,transparent=True)    plt.show()    plt.close()indir = 'f5_atac_overlap_coBinding_TFBS'outdir = 'f6_atac_overlap_coBinding_TFBS_figs'os.makedirs(outdir,exist_ok=True)atac_file = '../../../f9_TF_condensates_V3/data/TCGA/tcga_atac.bed'name_match = pd.read_excel('../../../f9_TF_condensates_V3/data/TCGA/TCGA-ATAC_SE_cancerType_match.xlsx',index_col=0)   name_match = name_match.dropna()clinical_dir = '../../..//f7_TF_condensates_test/f6_revised_TCGA_ATAC_cor_SE/f2_clinical_hicor_atac_peaks/f1_clinical_at_each_peak/f2_caseID_each_peak_vs_clinical/'p_thre = 0.05alpha = .7# selected_factors = {'MCF-7 top_TFBSCP':['ERG','ELK1','FOS'],#                     'MCF-7 top_zscored_TFBSCP':['ERG','JUND','ZNF143'],#                     'HCT-116 top_TFBSCP':['ELF1','JUND','SRF',],#                     'HCT-116 top_zscored_TFBSCP':['JUND','CEBPB','YY1']}selected_factors = {}tfbs_cp_dir = '../f2_cor_CP_SE_AICAP/f9_per_CT_TFBS_CP_cor_zscore_CP/TFBS_CP/'for ct in ['MCF-7','HCT-116'][:]:    df = pd.read_csv('{}/_CP_TFBS_all_vs_TFMS_{}.csv'.format(tfbs_cp_dir,ct),index_col=0)    selected_factors['{} top_TFBSCP'.format(ct)] = df['TFBS CP rank'].sort_values().iloc[:3].index    selected_factors['{} top_zscored_TFBSCP'.format(ct)] = df['avg rank'].sort_values().iloc[:3].indexflag = 'ATAC-seq peaks'# for ct in ['MCF-7','HCT-116'][:]:for cancertype in ['BRCA','COAD'][:]:    ct = name_match.loc[cancertype].SE    clinical_df = pd.read_csv('{}/{}_logrank_info.csv'.format(clinical_dir,cancertype),index_col=0)    for treat_flag in ['percentile_T','percentile_T_ExtendMerge'][:]:        for factorType in ['top_TFBSCP','top_zscored_TFBSCP'][:]:            subdir = '{}_{}'.format(ct,factorType)            os.makedirs(outdir+os.sep+subdir,exist_ok=True)                        factors = selected_factors['{} {}'.format(ct,factorType)]                        xticklabels = ['Union',                           '{}'.format('-'.join([i for i in factors[:1]])),                           '{}'.format('-'.join([i for i in factors[1:2]])),                           '{}'.format('-'.join([i for i in factors[2:3]])),                           '{}'.format('-'.join([i for i in factors[:2]])),                           '{}'.format('-'.join([i for i in factors[:3]])),                           ]                        out_df = pd.DataFrame()            add_logrank_info(out_df,clinical_df,'All',flag)            for ii in np.arange(len(xticklabels))[:]:                overlapped_bed = '{}/{}/atac_overlapped_{}_{}_{}.bed'.format(indir,subdir,treat_flag,ct,xticklabels[ii])                overlapped_df = pd.read_csv(overlapped_bed,sep='\t',index_col=3,header=None)                overlapped_df.columns = ['chr','start','end','score','annotation']                # ==== save the clinical info                merged_df = pd.concat([overlapped_df,clinical_df],axis=1).dropna()                merged_df.to_csv('{}/{}/_{}_{}_{}_logRank.csv'.format(outdir,subdir,cancertype,treat_flag,xticklabels[ii]))                               clinical_df_tf = clinical_df.loc[overlapped_df.index]                add_logrank_info(out_df,clinical_df_tf,xticklabels[ii],'ATAC-seq peaks')                # commandLine = 'bedtools intersect \\\n-a {} \\\n-b {} \\\n-wa -u > {}\n'.format(atac_file,outbed,overlapped_bed)                # print(commandLine);os.system(commandLine)                        out_df.to_csv('{}/{}/{}_{}_clinical.csv'.format(outdir,subdir,cancertype,treat_flag))            figname = '{}/{}/{}_{}_clinical.pdf'.format(outdir,subdir,cancertype,treat_flag)            stack_bar(out_df,['All']+xticklabels,figname,cancertype,flag)
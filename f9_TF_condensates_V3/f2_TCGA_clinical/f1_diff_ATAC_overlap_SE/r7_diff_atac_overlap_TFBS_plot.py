import sys,argparseimport os,glob,reimport numpy as npimport pandas as pd#from GenomeData import *import matplotlib# matplotlib.use('Agg')import matplotlib.pyplot as pltmatplotlib.rcParams['font.size']=13matplotlib.rcParams["font.sans-serif"] = ["Arial", "Liberation Sans", "Bitstream Vera Sans"]matplotlib.rcParams["font.family"] = "sans-serif"import seaborn as snssns.set(font_scale=1)sns.set_style("whitegrid", {'axes.grid' : False})sns.set_style("ticks")# from matplotlib_venn import venn3,venn2from scipy import statsimport warningswarnings.filterwarnings("ignore")def mark_pvalue(compr_pos,positions,box_vals):    s,p = stats.ttest_ind(box_vals[compr_pos[0]],box_vals[compr_pos[1]],nan_policy='omit')    y, h, col = np.percentile(np.append(box_vals[compr_pos[0]],box_vals[compr_pos[1]]),91)*0.95 ,1.1, 'k'    y2 = np.percentile(np.append(box_vals[compr_pos[0]],box_vals[compr_pos[1]]),0)*0.9    x1,x2 = positions[compr_pos[0]],positions[compr_pos[1]]    p_label='{} {:.1e}'.format('dn' if s>0 else 'up', p)    if p_label[-2]=='0':        p_label = p_label[:-2]+p_label[-1]    if p<1:        if p>0.05:            p_label = 'n.s.'        if compr_pos[2] == 't':            plt.plot([x1*1.03, x1*1.03, x2*0.97, x2*0.97], [y, y*h, y*h, y], lw=1, c=col)            plt.text((x1+x2)*.5, y*1.2, p_label, ha='center', va='center', color=col,fontsize=13)        else:            plt.plot([x1*1.03, x1*1.03, x2*0.97, x2*0.97], [y2, y2*1.1, y2*1.1, y2], lw=1, c=col)            plt.text((x1+x2)*.5, y2*1.25, p_label, ha='center', va='top', color=col,fontsize=13)    return s,p# mergefile_dir = '../../f1_TF_cluster_potential/f3_clustered_TFBS/f0_TFBS_merge/'tfbs_dir = '../../f1_TF_cluster_potential/f2_cor_CP_SE_AICAP/f3_TFBS_CP_heatmap/_csv'   tfbs_cp_types = ['CP_TFBS_vs_TFMS',                 'CP_TFBS_overlap_motif_vs_TFMS',                 'CP_TFBS_NOT_overlap_motif_vs_TFMS']name_match = pd.read_excel('../../data/TCGA/TCGA-ATAC_SE_cancerType_match.xlsx',index_col=0)   name_match = name_match.dropna()# atac_file = '../../data/TCGA/tcga_atac.bed'alpha = .7indir = 'f6_diff_ATAC_overlap_TFBS_data'outdir = 'f7_diff_ATAC_overlap_TFBS_plot'os.makedirs(outdir,exist_ok=True)for tfbs_cp_type in tfbs_cp_types[:1]:    tfbs_cp_s = pd.read_csv('{}/data_fisher_{}_CP_RankSum_statistics.csv'.format(tfbs_dir,tfbs_cp_type),index_col=0)        # for ct in ['MCF-7','HCT-116','HeLa','LNCaP','U87'][:2]:    # for cancertype in name_match.index[:1]:    for cancertype in ['BRCA','COAD'][1:]:        ct = name_match.loc[cancertype].SE        diff_file = '{}/{}_overlap_TFBS.csv'.format(indir,ct)        df = pd.read_csv(diff_file,index_col=3)        # outdf = outdf[['#seqnames', 'start', 'end', 'name', 'stats', 'pvalue']]        # outdf.columns = ['chr','start','end','id','score','annotation'        box_vals = []        xticklabels = []        # box_vals.append()                factors = tfbs_cp_s[ct].dropna().sort_values(ascending=False).index                # for factor in factors[:1]:            # for factor in ['ERG','E2F1','MYC']:            for factor in ['SRF','JUND','CEBPB']:                                 prename = '{}_{}'.format(ct,factor)            val = df[df[prename]!=0].stats.values            box_vals.append(val) ;print(len(val))            xticklabels.append('+{}'.format(factor))                        # outdf = add_overlap_info(outdf,indir,prename)            # outdf = add_overlap_info(outdf,indir,prename)            # x_vals.append(tfbs_cp_s[ct].loc[factor])            # val1 = df[df[prename]!=0].stats.values            # box_vals.append(val1)             # prename = '{}_{}_overlap_SE'.format(ct,factor)            # val = df[df[prename]!=0].stats.values            # box_vals.append(val) ;print(len(val))            # xticklabels.append('+{}+SE'.format(factor))                        # val = df[(df['{}_SE'.format(ct)]!=0)&(df[prename]==0)].stats.values            # # val1 = df[df[prename]!=0].stats.values            # box_vals.append(val)             # xticklabels.append('-{}+SE'.format(factor))                        prename = '{}_{}_percentile5'.format(ct,factor)            val = df[df[prename]!=0].stats.values            box_vals.append(val) ;print(len(val))            xticklabels.append('+{}+percentile5'.format(factor))                        # prename = '{}_{}_percentile5'.format(ct,factor)            # val = df[(df[prename]!=0)&(df['{}_SE'.format(ct)]!=0)].stats.values            # box_vals.append(val) ;print(len(val))            # xticklabels.append('+{}+percentile5+SE'.format(factor))                val2 = df[df['{}_SE'.format(ct)]!=0].stats.values        box_vals.append(val2)         xticklabels.append('SE')                # val2 = df[df['{}_SE'.format(ct)]==0].stats.values        # box_vals.append(val2)                 # colors = [ 'tab:red','tab:grey']        colors = ['k']*len(box_vals)                        positions = np.arange(len(box_vals))                plt.figure(figsize=(6.8,2.6))        g = plt.boxplot(box_vals,positions=positions,widths = .6,patch_artist=True,\                    boxprops=dict(color='k',facecolor='w',fill=None,lw=1),\                    medianprops=dict(color='k'),showfliers=False)                # scatter_X = []        # for position_id in np.arange(len(positions)):        #     scatter_x = np.random.normal(positions[position_id],0.05,len(box_vals[position_id]))        #     plt.scatter(scatter_x,box_vals[position_id],color=colors[position_id],        #                 lw=0,s=22,zorder=0,alpha=.5,marker='o',rasterized=True)                for compr_pos in [[0,1,'t'],[2,3,'t'],[4,5,'t']]:            s,p = mark_pvalue(compr_pos,positions,box_vals)            # print(cancertype,flag,compr_pos,s,p)                plt.title(cancertype)        plt.ylabel('$\Delta$ ATAC-seq score \n ({} over others)'.format(cancertype))        # plt.axes().set_xticklabels(['{:,} ATAC-seq peaks \n overlap w/ {} SE'.format(overlap_df.shape[0],cancertype_SE_rename),        #                             '{:,} ATAC-seq peaks \n NOT overlap w/ {} SE'.format(nonoverlap_df.shape[0],cancertype_SE_rename)],        #                            rotation=35,ha='center',fontsize=13)        plt.axes().set_xticklabels(xticklabels,                                    rotation=60,ha='right',fontsize=11)        plt.axhline(y=0,color='grey',linestyle='--',linewidth=.7)                plt.title(ct)        plt.savefig('{}/{}_diff_ATAC_compr.pdf'.format(outdir,cancertype),                    bbox_inches='tight',pad_inches=0.1,dpi=600,transparent=True)        plt.show()        plt.close()                        # prename = '{}_SE'.format(ct,factor)        # outdf = add_overlap_info(outdf,indir,prename)                    # outdf.to_csv('{}/{}_overlap_TFBS.csv'.format(outdir,ct),index=False)                    #     infile = '{}/atac_overlap_{}_{}.bed'.format(indir,ct,factor)        #     df = pd.read_csv(infile,header=None,sep='\t')        #     df.columns = ['chr','start','end','id','score','annotation',prename]        #     outdf = pd.concat([outdf,df[prename]],axis=1)            #     outfile = '{}/atac_overlap_{}_{}_overlap_SE.bed'.format(outdir,ct,factor)        # outfile = '{}/atac_overlap_{}_SE.bed'.format(outdir,ct)        # for celltype in ['MCF-7','HCT-116'][:]:#     # ==== save the overlap info for each factor#     outdf = pd.DataFrame()#     prenames = cellTypes[celltype]#     for prename in prenames[:]:#         infile = '{}/{}_merge_overlap_{}.bed'.format(indir,celltype,prename,)#         df = pd.read_csv(infile,header=None,sep='\t')#         df.columns = ['chr','start','end',prename]#         if outdf.shape[0]==0:#             outdf = pd.concat([outdf,df],axis=1)#         else:#             outdf = pd.concat([outdf,df[prename]],axis=1)#     outdf.loc[outdf['hg38_introns']!=0,'annotation']='Intron'#     outdf.loc[outdf['hg38_exons']!=0,'annotation']='Exon'#     outdf.loc[outdf['hg38_4k_promoter_geneID']!=0,'annotation']='Promoter'#     outdf['annotation'] = outdf['annotation'].fillna('Distal')    #     # ==== save the overlap infor    #     outdf.to_csv('{}/{}_cobinding.csv'.format(outdir,celltype),index=False)            # # ==== venn for co-binding    # a = set(outdf[outdf[prenames[0]]!=0].index)    # b = set(outdf[outdf[prenames[1]]!=0].index)    # c = set(outdf[outdf[prenames[2]]!=0].index)    # # total=2723010    # # s,p = stats.fisher_exact([[len(a.intersection(b)),len(a)],[len(b),total-len(b)]])    # # print(celltype,s,p)    # set_labels = [i.split('_')[1] for i in prenames]    # colors = ['tab:red','tab:blue','tab:green']    # colors = ['salmon','steelblue','mediumaquamarine']    # plt.figure(figsize=(2.5,2.5))    # out = venn3([a,b,c],set_labels=set_labels,set_colors=colors, alpha=alpha)    # for text in out.set_labels:    #     text.set_fontsize(11)    # for text in out.subset_labels:    #     text.set_fontsize(8)    # plt.title(celltype,fontsize=12)    # plt.savefig('{}/{}_venn.pdf'.format(outdir,celltype),bbox_inches = 'tight',pad_inches=0.1,transparent=True)    # plt.show()    # plt.close()        # # ==== bar plot for genomic annotations    # info_df = pd.DataFrame()    # plt.figure(figsize=(3,3))    # dfs = [outdf,    #        outdf[(outdf[prenames[0]]!=0)],    #        outdf[(outdf[prenames[1]]!=0)],    #        outdf[(outdf[prenames[2]]!=0)],    #        outdf[(outdf[prenames[0]]!=0)&(outdf[prenames[1]]!=0)],    #        outdf[(outdf[prenames[0]]!=0)&(outdf[prenames[1]]!=0)&(outdf[prenames[2]]!=0)]]    # xticklabels = ['All',    #                '{}'.format('-'.join([i.split('_')[1] for i in prenames[:1]])),    #                '{}'.format('-'.join([i.split('_')[1] for i in prenames[1:2]])),    #                '{}'.format('-'.join([i.split('_')[1] for i in prenames[2:3]])),    #                '{}'.format('-'.join([i.split('_')[1] for i in prenames[:2]])),    #                '{}'.format('-'.join([i.split('_')[1] for i in prenames[:3]])),    #                ]    # colors = ['tab:green','tab:blue','tab:gray','tab:orange'][::-1]    # colors = ['mediumaquamarine','steelblue','silver','salmon'][::-1]    # labels = ["Promoter","Exon","Intron","Distal"][::-1]    # positions = np.arange(len(dfs))    # for position in positions:    #     a = (dfs[position]['annotation']==labels[0]).sum()    #     b = (dfs[position]['annotation']==labels[1]).sum()    #     c = (dfs[position]['annotation']==labels[2]).sum()    #     d = (dfs[position]['annotation']==labels[3]).sum()    #     e = (dfs[position]['{}_SE'.format(celltype)]!=0).sum()    #     # e = ((dfs[position]['annotation']==labels[0])&(dfs[position]['{}_SE'.format(celltype)]!=0)).sum()    #     total = a+b+c+d    #     info_df.loc[xticklabels[position],labels[0]]=a    #     info_df.loc[xticklabels[position],labels[1]]=b    #     info_df.loc[xticklabels[position],labels[2]]=c    #     info_df.loc[xticklabels[position],labels[3]]=d    #     info_df.loc[xticklabels[position],'total']=total    #     info_df.loc[xticklabels[position],'SE overlapped']=e    #     info_df.loc[xticklabels[position],'%SE overlapped']=np.round(e/total,3)    #     g0 = plt.bar(position, 100*a/total, bottom=0, width=.68, lw=0, color=colors[0],label=labels[0],alpha=alpha)    #     g1 = plt.bar(position, 100*b/total, bottom=100*a/total, width=.68, lw=0, color=colors[1],label=labels[1],alpha=alpha)    #     g2 = plt.bar(position, 100*c/total, bottom=100*(a+b)/total, width=.68, lw=0, color=colors[2],label=labels[2],alpha=alpha)    #     g3 = plt.bar(position, 100*d/total, bottom=100*(a+b+c)/total, width=.68, lw=0, color=colors[3],label=labels[3],alpha=alpha)    #     plt.text(position,0, a,va='bottom',ha='center',fontsize=9)    #     plt.text(position,100*a/total, b,va='bottom',ha='center',fontsize=9)    #     plt.text(position,100*(a+b)/total, c,va='bottom',ha='center',fontsize=9)    #     plt.text(position,100*(a+b+c)/total, d,va='bottom',ha='center',fontsize=9)    #     position+=1    # info_df.to_csv('{}/{}_annotation.csv'.format(outdir,celltype))    # plt.ylabel('TFBS co-binding (%)',fontsize=13)    # plt.ylim([0,100])    # plt.legend([g3,g2,g1,g0],["Promoter","Exon","Intron","Intergenic"],    #            loc=1,bbox_to_anchor=(1.5,1.05),fontsize=13,    #            borderaxespad=0.2,labelspacing=.2,handletextpad=0.2,handlelength=1,frameon=False)    # plt.axes().set_xticks(positions)     # sns.despine(offset=0, trim=True)    # plt.axes().spines['bottom'].set_visible(False)    # plt.axes().set_xticklabels(xticklabels,rotation=45,ha='right',fontsize=13)     # plt.axes().tick_params(axis='x',direction='out', length=0, width=.8, colors='black')    # plt.title(celltype,fontsize=12)    # plt.savefig('{}/{}_annotation.pdf'.format(outdir,celltype),bbox_inches = 'tight',pad_inches=0.1,transparent=True)    # plt.show()    # plt.close()        # # ==== bar plot of SE overlap     # plt.figure(figsize=(3,3))    # positions = np.arange(len(dfs))    # for position in positions:    #     val = info_df.loc[xticklabels[position],'%SE overlapped']    #     val_num = info_df.loc[xticklabels[position],'SE overlapped']    #     g = plt.bar(position, val, width=.68, lw=0, color='tab:red',alpha=alpha)    #     plt.text(position,val, int(val_num),va='bottom',ha='center',fontsize=9)    #     position+=1    # plt.ylabel('SE overlapped (%)',fontsize=13)    # # plt.ylim([0,.15])    # plt.axes().set_xticks(positions)     # sns.despine(offset=0, trim=True)    # plt.axes().spines['bottom'].set_visible(False)    # plt.axes().set_xticklabels(xticklabels,rotation=45,ha='right',fontsize=13)     # plt.axes().tick_params(axis='x',direction='out', length=0, width=.8, colors='black')    # plt.title(celltype,fontsize=12)    # plt.savefig('{}/{}_SE_overlapped.pdf'.format(outdir,celltype),bbox_inches = 'tight',pad_inches=0.1,transparent=True)    # plt.show()    # plt.close()    